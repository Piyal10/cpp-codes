#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    node *left;
    node *right;
};
node *root=NULL;

void BST_insert(int value)
{
    node *temp;
    temp=new node();
    temp->data=value;
    temp->left=NULL;
    temp->right=NULL;

    node *curr_node=root;
    node *prev_node=root;

    if(root==NULL)root=temp;
    else
    {
        curr_node=root;
        prev_node=root;
        while(curr_node!=NULL)
        {
            prev_node=curr_node;
            if(curr_node->data<value)curr_node=curr_node->right;
            else curr_node=curr_node->left;
        }
        if(prev_node->data<value)prev_node->right=temp;
        else prev_node->left=temp;
    }
}
void inorder(node *temp)
{
    if(temp!=NULL)
    {
        inorder(temp->left);
        cout<<temp->data<<endl;
        inorder(temp->right);
    }
}
void preorder(node *temp)
{
    if(temp!=NULL)
    {
        cout<<temp->data<<endl;
        preorder(temp->left);
        preorder(temp->right);
    }
}
void postorder(node *temp)
{
    if(temp!=NULL)
    {
        postorder(temp->left);
        postorder(temp->right);
        cout<<temp->data<<endl;
    }
}
void maximum(node *temp)
{
    while(temp->right!=NULL)
    {
        temp=temp->right;

    }
    cout<<temp->data;
}
void minimum(node *temp)
{
    while(temp->left!=NULL)
    {
        temp=temp->left;

    }
    cout<<temp->data;
}
void perfect_tree(int value)
{
    node *temp;
    temp=new node();
    temp->data=value;
    temp->left=NULL;
    temp->right=NULL;

    queue <node*>Q;
    Q.push(temp);
    while(!Q.empty())
    {
        node *curr_node=Q.front()
       
    }
   
}

int main()
{
    int x;
    for(int i=1 ; i<=11 ; i++)
    {
        cin>>x;
        BST_insert(x);
    }
    cout<<"In Order: "<<endl;
    inorder(root);
    cout<<"Pre Order: "<<endl;
    preorder(root);
    cout<<"Post Order: "<<endl;
    postorder(root);
    cout<<"Maximum Value: ";
    maximum(root);
    cout<<endl;
    cout<<"Minimum Value: ";
    minimum(root);

}
/*
12
6
9
18
4
10
5
16
49
31
43
*/
