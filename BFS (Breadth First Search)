#include<bits/stdc++.h>
using namespace std;

vector <int> Node [11];
int level[11];
int parent[11];
bool flag =false;

void BFS(int source)
{
    level[source]=0;
    queue<int>Q;
    Q.push(source);
    while (!Q.empty())
    {
        int u=Q.front();
        Q.pop();
        for(int j=0 ; j<Node[u].size() ; j++)
        {
            int v= Node[u][j];

            if(level[v]==-1)
            {
                parent[v]=u;
                level[v]=level[u]+1;
                Q.push(v);
            }
            else if(level[v]==level[u])
            {
                flag=true;
            }
        }
    }
}
void PATH(int node)
{
    if(node!=parent[node])
    {
        PATH(parent[node]);
    }
    cout<<node<<endl;
}

int main ()
{
    int n,e;
    cin>>n>>e;
    for(int i=0 ; i<e ; i++)
    {
        int nodeA, nodeB;
        cin>>nodeA>>nodeB;
        Node[nodeA].push_back(nodeB);
        Node[nodeB].push_back(nodeA);
    }
    cout<<"Node Adjacency list: "<<endl;
    for(int i=1 ; i<=n ; i++)
    {
        cout<<i<<"->";
        for(int j=0 ; j<Node[i].size() ; j++)
        {
            cout<<Node[i][j]<<",";
        }
        cout<<endl;

    }
    for(int i=0 ; i<=n ; i++)
    {
        level[i]=-1;
        parent[i]=i;
    }
    BFS(1);
    cout<<"\nLevel of Each Node: "<<endl;
    for(int i=1 ; i<=n ; i++)
    {
        cout<<i<<"="<<level[i]<<endl;
    }
    cout<<"Shortest Path: "<<endl;
    PATH(10);
    if(flag)
    {
        cout<<"\nCycle ase"<<endl;
    }
    else
    {
        cout<<"\nCycle nai"<<endl;
    }
}
/*
10 13
1 2
1 4
1 3
2 6
6 10
3 7
4 7
3 8
7 8
9 7
9 10
8 5
10 5
*/
